package species2.id0; import java . lang . Exception ; import java . util . ArrayList ; import minijava . Util ; public class GeneticProgram { public static void compute ( ArrayList < Long > values00 ) { int size = values00 . size ( ) ; ArrayList < Long > values01 = new ArrayList < Long > ( values00 ) ; ArrayList < Long > values02 = new ArrayList < Long > ( values00 ) ; ArrayList < Long > values03 = new ArrayList < Long > ( values00 ) ; ArrayList < Long > values04 = new ArrayList < Long > ( values00 ) ; ArrayList < Long > values05 = new ArrayList < Long > ( values00 ) ; ArrayList < Long > values06 = new ArrayList < Long > ( values00 ) ; ArrayList < Long > values07 = new ArrayList < Long > ( values00 ) ; ArrayList < Long > values08 = new ArrayList < Long > ( values00 ) ; ArrayList < Long > values09 = new ArrayList < Long > ( values00 ) ; Long value00 = new Long ( 0 ) ; Long value01 = new Long ( 0 ) ; Long value02 = new Long ( 0 ) ; Long value03 = new Long ( 0 ) ; Long value04 = new Long ( 0 ) ; Long value05 = new Long ( 0 ) ; Long value06 = new Long ( 0 ) ; Long value07 = new Long ( 0 ) ; Long value08 = new Long ( 0 ) ; Long value09 = new Long ( 0 ) ; Boolean condition00 = new Boolean ( false ) ; Boolean condition01 = new Boolean ( false ) ; Boolean condition02 = new Boolean ( false ) ; Boolean condition03 = new Boolean ( false ) ; Boolean condition04 = new Boolean ( false ) ; Boolean condition05 = new Boolean ( false ) ; Boolean condition06 = new Boolean ( false ) ; Boolean condition07 = new Boolean ( false ) ; Boolean condition08 = new Boolean ( false ) ; Boolean condition09 = new Boolean ( false ) ; try { value09 = new Long ( 1 ) ; value00 = new Long ( values09 . get ( new Long ( Util . f ( 67 , 92 ) ) . intValue ( ) % size ) ) ; value01 = new Long ( ( 4000 + value00 ) ) ; value01 = new Long ( 1 ) ; if ( ( ( ( - 35 ) % ( ( values00 . size ( ) ^ ( ( ( ( ( ( values00 . size ( ) & value01 ) & 78 ) & value06 ) + 93 ) / value00 ) ^ 93 ) ) + 1 ) ) != 53 ) ) { condition07 = new Boolean ( ( ! true ) ) ; } while ( ! Thread . currentThread ( ) . isInterrupted ( ) && ( value09 == 1 ) ) { value01 = new Long ( ( value01 + 2 ) ) ; while ( ! Thread . currentThread ( ) . isInterrupted ( ) && ( ( ( ( value00 % value01 ) == 0 ) && ( ( ( values02 . size ( ) ^ 59 ) * value05 ) <= 44 ) ) && ( value04 <= value05 ) ) ) { if ( true ) { value09 = new Long ( value01 ) ; } value03 = new Long ( 11 ) ; value01 = new Long ( 16 ) ; } if ( ( 4000 < value01 ) ) { value01 = new Long ( ( 35 | ( values07 . size ( ) * ( ( 95 ^ value02 ) + 34 ) ) ) ) ; value06 = new Long ( value09 ) ; value03 = new Long ( 35 ) ; value01 = new Long ( ( value01 + 2 ) ) ; if ( ( ( ( 73 * value04 ) * value04 ) == value04 ) ) { if ( ( Util . f ( 11 , ( ( ( values02 . get ( new Long ( 76 ) . intValue ( ) % size ) + 62 ) * 6 ) + 17 ) , value06 ) == ( - Util . f ( 49 , value01 ) ) ) ) { } else { value09 = new Long ( Util . f ( 80 , values00 . get ( new Long ( values01 . get ( new Long ( value02 ) . intValue ( ) % size ) ) . intValue ( ) % size ) ) ) ; } } } } values00 . set ( new Long ( 0 ) . intValue ( ) % size , new Long ( value09 ) ) ; value01 = new Long ( 0 ) ; } catch ( Exception e ) { values00 . clear ( ) ; } } } 