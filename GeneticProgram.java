package package0; import java . lang . Exception ; import java . util . ArrayList ; import minijava . Util ; public class GeneticProgram { public static void compute ( ArrayList < Long > values00 ) { int size = values00 . size ( ) ; ArrayList < Long > values01 = new ArrayList < Long > ( values00 ) ; ArrayList < Long > values02 = new ArrayList < Long > ( values00 ) ; ArrayList < Long > values03 = new ArrayList < Long > ( values00 ) ; ArrayList < Long > values04 = new ArrayList < Long > ( values00 ) ; ArrayList < Long > values05 = new ArrayList < Long > ( values00 ) ; ArrayList < Long > values06 = new ArrayList < Long > ( values00 ) ; ArrayList < Long > values07 = new ArrayList < Long > ( values00 ) ; ArrayList < Long > values08 = new ArrayList < Long > ( values00 ) ; ArrayList < Long > values09 = new ArrayList < Long > ( values00 ) ; Long value00 = new Long ( 0 ) ; Long value01 = new Long ( 0 ) ; Long value02 = new Long ( 0 ) ; Long value03 = new Long ( 0 ) ; Long value04 = new Long ( 0 ) ; Long value05 = new Long ( 0 ) ; Long value06 = new Long ( 0 ) ; Long value07 = new Long ( 0 ) ; Long value08 = new Long ( 0 ) ; Long value09 = new Long ( 0 ) ; ArrayList < Boolean > conditions00 = new ArrayList < Boolean > ( size ) ; ArrayList < Boolean > conditions01 = new ArrayList < Boolean > ( size ) ; ArrayList < Boolean > conditions02 = new ArrayList < Boolean > ( size ) ; ArrayList < Boolean > conditions03 = new ArrayList < Boolean > ( size ) ; ArrayList < Boolean > conditions04 = new ArrayList < Boolean > ( size ) ; ArrayList < Boolean > conditions05 = new ArrayList < Boolean > ( size ) ; ArrayList < Boolean > conditions06 = new ArrayList < Boolean > ( size ) ; ArrayList < Boolean > conditions07 = new ArrayList < Boolean > ( size ) ; ArrayList < Boolean > conditions08 = new ArrayList < Boolean > ( size ) ; ArrayList < Boolean > conditions09 = new ArrayList < Boolean > ( size ) ; Boolean condition00 = new Boolean ( false ) ; Boolean condition01 = new Boolean ( false ) ; Boolean condition02 = new Boolean ( false ) ; Boolean condition03 = new Boolean ( false ) ; Boolean condition04 = new Boolean ( false ) ; Boolean condition05 = new Boolean ( false ) ; Boolean condition06 = new Boolean ( false ) ; Boolean condition07 = new Boolean ( false ) ; Boolean condition08 = new Boolean ( false ) ; Boolean condition09 = new Boolean ( false ) ; try {if(false){ }else{values00.set(new Long(values00.size()).intValue()%size, new Long((value07^(values08.size()+75))));}} catch ( Exception e ) { values00 . clear ( ) ; } } } 