package package0; import java . lang . Exception ; import java . util . ArrayList ; import minijava . Util ; public class GeneticProgram { public static void compute ( ArrayList < Long > values00 ) { int size = values00 . size ( ) ; ArrayList < Long > values01 = new ArrayList < Long > ( values00 ) ; ArrayList < Long > values02 = new ArrayList < Long > ( values00 ) ; ArrayList < Long > values03 = new ArrayList < Long > ( values00 ) ; ArrayList < Long > values04 = new ArrayList < Long > ( values00 ) ; ArrayList < Long > values05 = new ArrayList < Long > ( values00 ) ; ArrayList < Long > values06 = new ArrayList < Long > ( values00 ) ; ArrayList < Long > values07 = new ArrayList < Long > ( values00 ) ; ArrayList < Long > values08 = new ArrayList < Long > ( values00 ) ; ArrayList < Long > values09 = new ArrayList < Long > ( values00 ) ; Long value00 = new Long ( 0 ) ; Long value01 = new Long ( 0 ) ; Long value02 = new Long ( 0 ) ; Long value03 = new Long ( 0 ) ; Long value04 = new Long ( 0 ) ; Long value05 = new Long ( 0 ) ; Long value06 = new Long ( 0 ) ; Long value07 = new Long ( 0 ) ; Long value08 = new Long ( 0 ) ; Long value09 = new Long ( 0 ) ; ArrayList < Boolean > conditions00 = new ArrayList < Boolean > ( size ) ; ArrayList < Boolean > conditions01 = new ArrayList < Boolean > ( size ) ; ArrayList < Boolean > conditions02 = new ArrayList < Boolean > ( size ) ; ArrayList < Boolean > conditions03 = new ArrayList < Boolean > ( size ) ; ArrayList < Boolean > conditions04 = new ArrayList < Boolean > ( size ) ; ArrayList < Boolean > conditions05 = new ArrayList < Boolean > ( size ) ; ArrayList < Boolean > conditions06 = new ArrayList < Boolean > ( size ) ; ArrayList < Boolean > conditions07 = new ArrayList < Boolean > ( size ) ; ArrayList < Boolean > conditions08 = new ArrayList < Boolean > ( size ) ; ArrayList < Boolean > conditions09 = new ArrayList < Boolean > ( size ) ; Boolean condition00 = new Boolean ( false ) ; Boolean condition01 = new Boolean ( false ) ; Boolean condition02 = new Boolean ( false ) ; Boolean condition03 = new Boolean ( false ) ; Boolean condition04 = new Boolean ( false ) ; Boolean condition05 = new Boolean ( false ) ; Boolean condition06 = new Boolean ( false ) ; Boolean condition07 = new Boolean ( false ) ; Boolean condition08 = new Boolean ( false ) ; Boolean condition09 = new Boolean ( false ) ; try { if ( true ) { values00 . set ( new Long ( 9 ) . intValue ( ) % size , new Long ( ( value03 + ( ( ( ( 78 * 93 ) - 67 ) | 16 ) * ( values02 . size ( ) ^ ( ( 90 * 32 ) * 96 ) ) ) ) ) ) ; } else { } if ( true ) { values00 . set ( new Long ( 58 ) . intValue ( ) % size , new Long ( ( value00 + ( ( ( ( 57 * 90 ) - 1 ) | value09 ) * ( 65 ^ ( ( 64 * 95 ) * 57 ) ) ) ) ) ) ; } else { } if ( true ) { values00 . set ( new Long ( 26 ) . intValue ( ) % size , new Long ( ( values07 . size ( ) + ( ( ( ( 70 * 77 ) - 26 ) | 10 ) * ( values08 . size ( ) ^ ( ( 53 * 94 ) * 51 ) ) ) ) ) ) ; values00 . set ( new Long ( 62 ) . intValue ( ) % size , new Long ( ( value07 + ( ( ( ( 89 * 48 ) - 20 ) | value04 ) * ( values05 . size ( ) ^ ( ( 24 * 93 ) * 61 ) ) ) ) ) ) ; } else { } if ( true ) { values00 . set ( new Long ( 51 ) . intValue ( ) % size , new Long ( 91 ) ) ; } else { } if ( true ) { values00 . set ( new Long ( 87 ) . intValue ( ) % size , new Long ( ( values00 . size ( ) + ( ( ( 93 * 72 ) * 76 ) * ( values02.size() ^ ( 57 * 54 ) ) ) ) ) ) ; } else { } if ( true ) { values00 . set ( new Long ( value08 ) . intValue ( ) % size , new Long ( 97 ) ) ; } else { } } catch ( Exception e ) { values00 . clear ( ) ; } } } 